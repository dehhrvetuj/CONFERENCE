/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
/*   Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt   *\
|  Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh	true;

snap            true;

addLayers       true;


geometry
{

    room.stl
    {
        type            triSurfaceMesh;
        name            room;
    }
	
    manikin.stl
    {
        type            triSurfaceMesh;
        name            manikin;
    }
	
    refine1.stl
    {
        type            triSurfaceMesh;
        name            refine1;
    }
    	
    refine2.stl
    {
        type            triSurfaceMesh;
        name            refine2;
    }	
}



castellatedMeshControls
{
    allowFreeStandingZoneFaces true;
    maxGlobalCells  9000000;
    maxLocalCells   3000000;
    minRefinementCells 20;
    nCellsBetweenLevels 2;
    resolveFeatureAngle 30;
    locationInMesh  ( 0 1 2 );
    features        ( { file "room.eMesh" ; level 1 ; } 
					    { file "manikin.eMesh" ; level 4 ; } 
					);

    refinementSurfaces
    {
        room
        {
            level           ( 1 2 );

            regions
            {
		
				"(FLOOR|CEILING|SIDE).*"
				{
					level (1 1);
					
					patchInfo
                    {
                        type            wall;
						inGroups (RoomWallGroup);
                    }
				}
				
				"BACK.*"
				{
					level (2 2);
					
					patchInfo
                    {
                        type            wall;
						inGroups (RoomWallGroup);
                    }
				}				
				
				"INLET.*"
				{
					level (1 1);
					
					patchInfo
                    {
                        type            patch;
						inGroups (RoomInletGroup);
                    }
				}				

				"(OUTLET1|OUTLET2).*"
				{
					level (2 2);
					
					patchInfo
                    {
                        type            patch;
						inGroups (RoomOutletGroup);
                    }					
				}
			}
		}
				
		manikin
        {
            level           ( 4 5 );

            regions
            {		
				"manikin.*"
				{
					level (5 5);
					
					patchInfo
                    {
                        type            wall;
                    }					
				}
			}
			
		}
    }


    refinementRegions
    {

        room
        {
            mode            distance;

            levels
            (
                ( 0.08 1 )

            );

        }
	        
		manikin
        {
            mode            distance;

            levels
            (
				( 0.01 4 )
				( 0.02 3 )
				( 0.06 2 )
                ( 0.10 1 )

            );

        }
		
		// refine1
        // {
            // mode            inside;

            // levels
            // (
				// ( 1E15 2 )

            // );

        // }
		
		// refine2
        // {
            // mode            inside;

            // levels
            // (
				// ( 1E15 2 )

            // );

        // }		
		
    }
}



snapControls
{
    explicitFeatureSnap true;
    implicitFeatureSnap false;
    multiRegionFeatureSnap true;
    nFeatureSnapIter 20;
    nRelaxIter      8;
    nSmoothPatch    5;
    nSolveIter      300;
    tolerance       3;
}



addLayersControls
{
    additionalReporting true;
    featureAngle    180;
    maxFaceThicknessRatio 0.8;
    maxThicknessToMedialRatio 0.9;
    minMedianAxisAngle 90;
    minThickness    0.01;
    nBufferCellsNoExtrude 0;
    nGrow           1;
    nLayerIter      10;
    nRelaxIter      20;
    nRelaxedIter    4;
    nSmoothNormals  50;
    nSmoothSurfaceNormals 100;
    nSmoothThickness 8;
    slipFeatureAngle 30;
    
    relativeSizes   true;
    
	thickness       1.0;
    //expansionRatio 1.2;
    finalLayerThickness 0.35;	
    
    // Optional: smooth displacement after medial axis determination.
    // default is 0.
    //nSmoothDisplacement 9
    
    
    layers
    {
		".*(FLOOR|CEILING|BACK|SIDE|BACK|OUTLET).*"	// 6.23 mm
		{
			nSurfaceLayers 4;
			//finalLayerThickness 0.35;
		}

		".*manikin.*"	// 0.39 mm
		{
			nSurfaceLayers 4;
			//finalLayerThickness 0.4;	
		}

    }
}

meshQualityControls
{
    //- Maximum non-orthogonality allowed. Set to 180 to disable.
    maxNonOrtho 80;

    //- Max skewness allowed. Set to <0 to disable.
    maxBoundarySkewness 20;
    maxInternalSkewness 4;

    //- Max concaveness allowed. Is angle (in degrees) below which concavity
    //  is allowed. 0 is straight face, <0 would be convex face.
    //  Set to 180 to disable.
    maxConcave 80;

    //- Minimum pyramid volume. Is absolute volume of cell pyramid.
    //  Set to a sensible fraction of the smallest cell volume expected.
    //  Set to very negative number (e.g. -1E30) to disable.
    // Minimum cell pyramid volume; case dependent
    // very important for solution and convergence, must not be negative
    minVol 1e-30;

    //- Minimum quality of the tet formed by the face-centre
    //  and variable base point minimum decomposition triangles and
    //  the cell centre. This has to be a positive number for tracking
    //  to work. Set to very negative number (e.g. -1E30) to
    //  disable.
    //     <0 = inside out tet,
    //      0 = flat tet
    //      1 = regular tet
    //  1e-15 (small positive) to enable tracking
    // -1e+30 (large negative) for best layer insertion    
    minTetQuality -1e+30;


    // if >0 : preserve single cells with all points on the surface if the
    // resulting volume after snapping (by approximation) is larger than
    // minVolCollapseRatio times old volume (i.e. not collapsed to flat cell).
    //  If <0 : delete always.
    minVolCollapseRatio -1;
    
    //- Minimum face area. Set to <0 to disable.
    minArea -1;

    //- Minimum face twist. Set to <-1 to disable. dot product of face normal
    // and face centre triangles normal
    minTwist 0.002;

    //- Minimum normalised cell determinant. This is the determinant of all
    //  the areas of internal faces. It is a measure of how much of the
    //  outside area of the cell is to other cells. The idea is that if all
    //  outside faces of the cell are 'floating' (zeroGradient) the
    //  'fixedness' of the cell is determined by the area of the internal faces.
    //  1 = hex, <= 0 = folded or flattened illegal cell
    minDeterminant 0.0001;

    //- Relative position of face in relation to cell centres (0.5 for orthogonal
    //  mesh) (0 -> 0.5)
    minFaceWeight 0.005;

    //- Volume ratio of neighbouring cells (0 -> 1)
    minVolRatio 0.001;

    //- Per triangle normal compared to average normal. Like face twist
    //  but now per (face-centre decomposition) triangle. Must be >0 for Fluent
    //  compatibility
    minTriangleTwist -1;

    nSmoothScale   4;
    
    errorReduction 0.75;

    relaxed
    {
        maxNonOrtho 80;
        maxBoundarySkewness 20;
        maxInternalSkewness 10;
        maxConcave 80;
        
        // Minimum cell pyramid volume; case dependent
        minVol  1E-60;
        
        //  1e-15 (small positive) to enable tracking
        // -1e+30 (large negative) for best layer insertion
        minTetQuality -1e+30;
        
        minArea           -1;
        minTwist          -1;
        minDeterminant    0;
        minFaceWeight     0;
        minVolRatio       0;

    }

}


debug           0;

mergeTolerance  1e-012;


// ************************************************************************* //
